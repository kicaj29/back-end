/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Item : TBase
{
  private string _field1;
  private string _field2;
  private string _field3;
  private string _field4;
  private string _field5;
  private string _field6;
  private string _field7;
  private string _field8;
  private string _field9;
  private string _field10;
  private string _field11;
  private string _field12;
  private string _field13;
  private string _field14;
  private string _field15;
  private string _field16;
  private string _field17;
  private string _field18;
  private string _field19;
  private string _field20;

  public string Field1
  {
    get
    {
      return _field1;
    }
    set
    {
      __isset.field1 = true;
      this._field1 = value;
    }
  }

  public string Field2
  {
    get
    {
      return _field2;
    }
    set
    {
      __isset.field2 = true;
      this._field2 = value;
    }
  }

  public string Field3
  {
    get
    {
      return _field3;
    }
    set
    {
      __isset.field3 = true;
      this._field3 = value;
    }
  }

  public string Field4
  {
    get
    {
      return _field4;
    }
    set
    {
      __isset.field4 = true;
      this._field4 = value;
    }
  }

  public string Field5
  {
    get
    {
      return _field5;
    }
    set
    {
      __isset.field5 = true;
      this._field5 = value;
    }
  }

  public string Field6
  {
    get
    {
      return _field6;
    }
    set
    {
      __isset.field6 = true;
      this._field6 = value;
    }
  }

  public string Field7
  {
    get
    {
      return _field7;
    }
    set
    {
      __isset.field7 = true;
      this._field7 = value;
    }
  }

  public string Field8
  {
    get
    {
      return _field8;
    }
    set
    {
      __isset.field8 = true;
      this._field8 = value;
    }
  }

  public string Field9
  {
    get
    {
      return _field9;
    }
    set
    {
      __isset.field9 = true;
      this._field9 = value;
    }
  }

  public string Field10
  {
    get
    {
      return _field10;
    }
    set
    {
      __isset.field10 = true;
      this._field10 = value;
    }
  }

  public string Field11
  {
    get
    {
      return _field11;
    }
    set
    {
      __isset.field11 = true;
      this._field11 = value;
    }
  }

  public string Field12
  {
    get
    {
      return _field12;
    }
    set
    {
      __isset.field12 = true;
      this._field12 = value;
    }
  }

  public string Field13
  {
    get
    {
      return _field13;
    }
    set
    {
      __isset.field13 = true;
      this._field13 = value;
    }
  }

  public string Field14
  {
    get
    {
      return _field14;
    }
    set
    {
      __isset.field14 = true;
      this._field14 = value;
    }
  }

  public string Field15
  {
    get
    {
      return _field15;
    }
    set
    {
      __isset.field15 = true;
      this._field15 = value;
    }
  }

  public string Field16
  {
    get
    {
      return _field16;
    }
    set
    {
      __isset.field16 = true;
      this._field16 = value;
    }
  }

  public string Field17
  {
    get
    {
      return _field17;
    }
    set
    {
      __isset.field17 = true;
      this._field17 = value;
    }
  }

  public string Field18
  {
    get
    {
      return _field18;
    }
    set
    {
      __isset.field18 = true;
      this._field18 = value;
    }
  }

  public string Field19
  {
    get
    {
      return _field19;
    }
    set
    {
      __isset.field19 = true;
      this._field19 = value;
    }
  }

  public string Field20
  {
    get
    {
      return _field20;
    }
    set
    {
      __isset.field20 = true;
      this._field20 = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool field1;
    public bool field2;
    public bool field3;
    public bool field4;
    public bool field5;
    public bool field6;
    public bool field7;
    public bool field8;
    public bool field9;
    public bool field10;
    public bool field11;
    public bool field12;
    public bool field13;
    public bool field14;
    public bool field15;
    public bool field16;
    public bool field17;
    public bool field18;
    public bool field19;
    public bool field20;
  }

  public Item() {
  }

  public void Read (TProtocol iprot)
  {
    //iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Field1 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Field2 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Field3 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Field4 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Field5 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Field6 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Field7 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Field8 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Field9 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Field10 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Field11 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Field12 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              Field13 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              Field14 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              Field15 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              Field16 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              Field17 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.String) {
              Field18 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.String) {
              Field19 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              Field20 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      //iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    //oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Item");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Field1 != null && __isset.field1) {
        field.Name = "field1";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field1);
        oprot.WriteFieldEnd();
      }
      if (Field2 != null && __isset.field2) {
        field.Name = "field2";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field2);
        oprot.WriteFieldEnd();
      }
      if (Field3 != null && __isset.field3) {
        field.Name = "field3";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field3);
        oprot.WriteFieldEnd();
      }
      if (Field4 != null && __isset.field4) {
        field.Name = "field4";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field4);
        oprot.WriteFieldEnd();
      }
      if (Field5 != null && __isset.field5) {
        field.Name = "field5";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field5);
        oprot.WriteFieldEnd();
      }
      if (Field6 != null && __isset.field6) {
        field.Name = "field6";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field6);
        oprot.WriteFieldEnd();
      }
      if (Field7 != null && __isset.field7) {
        field.Name = "field7";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field7);
        oprot.WriteFieldEnd();
      }
      if (Field8 != null && __isset.field8) {
        field.Name = "field8";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field8);
        oprot.WriteFieldEnd();
      }
      if (Field9 != null && __isset.field9) {
        field.Name = "field9";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field9);
        oprot.WriteFieldEnd();
      }
      if (Field10 != null && __isset.field10) {
        field.Name = "field10";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field10);
        oprot.WriteFieldEnd();
      }
      if (Field11 != null && __isset.field11) {
        field.Name = "field11";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field11);
        oprot.WriteFieldEnd();
      }
      if (Field12 != null && __isset.field12) {
        field.Name = "field12";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field12);
        oprot.WriteFieldEnd();
      }
      if (Field13 != null && __isset.field13) {
        field.Name = "field13";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field13);
        oprot.WriteFieldEnd();
      }
      if (Field14 != null && __isset.field14) {
        field.Name = "field14";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field14);
        oprot.WriteFieldEnd();
      }
      if (Field15 != null && __isset.field15) {
        field.Name = "field15";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field15);
        oprot.WriteFieldEnd();
      }
      if (Field16 != null && __isset.field16) {
        field.Name = "field16";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field16);
        oprot.WriteFieldEnd();
      }
      if (Field17 != null && __isset.field17) {
        field.Name = "field17";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field17);
        oprot.WriteFieldEnd();
      }
      if (Field18 != null && __isset.field18) {
        field.Name = "field18";
        field.Type = TType.String;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field18);
        oprot.WriteFieldEnd();
      }
      if (Field19 != null && __isset.field19) {
        field.Name = "field19";
        field.Type = TType.String;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field19);
        oprot.WriteFieldEnd();
      }
      if (Field20 != null && __isset.field20) {
        field.Name = "field20";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Field20);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      //oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Item(");
    bool __first = true;
    if (Field1 != null && __isset.field1) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field1: ");
      __sb.Append(Field1);
    }
    if (Field2 != null && __isset.field2) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field2: ");
      __sb.Append(Field2);
    }
    if (Field3 != null && __isset.field3) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field3: ");
      __sb.Append(Field3);
    }
    if (Field4 != null && __isset.field4) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field4: ");
      __sb.Append(Field4);
    }
    if (Field5 != null && __isset.field5) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field5: ");
      __sb.Append(Field5);
    }
    if (Field6 != null && __isset.field6) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field6: ");
      __sb.Append(Field6);
    }
    if (Field7 != null && __isset.field7) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field7: ");
      __sb.Append(Field7);
    }
    if (Field8 != null && __isset.field8) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field8: ");
      __sb.Append(Field8);
    }
    if (Field9 != null && __isset.field9) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field9: ");
      __sb.Append(Field9);
    }
    if (Field10 != null && __isset.field10) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field10: ");
      __sb.Append(Field10);
    }
    if (Field11 != null && __isset.field11) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field11: ");
      __sb.Append(Field11);
    }
    if (Field12 != null && __isset.field12) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field12: ");
      __sb.Append(Field12);
    }
    if (Field13 != null && __isset.field13) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field13: ");
      __sb.Append(Field13);
    }
    if (Field14 != null && __isset.field14) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field14: ");
      __sb.Append(Field14);
    }
    if (Field15 != null && __isset.field15) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field15: ");
      __sb.Append(Field15);
    }
    if (Field16 != null && __isset.field16) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field16: ");
      __sb.Append(Field16);
    }
    if (Field17 != null && __isset.field17) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field17: ");
      __sb.Append(Field17);
    }
    if (Field18 != null && __isset.field18) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field18: ");
      __sb.Append(Field18);
    }
    if (Field19 != null && __isset.field19) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field19: ");
      __sb.Append(Field19);
    }
    if (Field20 != null && __isset.field20) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Field20: ");
      __sb.Append(Field20);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

